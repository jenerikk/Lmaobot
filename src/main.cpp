#include <Geode/Geode.hpp>
#include <Geode/modify/PlayLayer.hpp>
#include <Geode/utils/file.hpp>
#include <Geode/ui/BasedButtonSprite.hpp>
#include <Geode/loader/Mod.hpp>
#include <Geode/loader/Dirs.hpp>

using namespace geode::prelude;

const int LMAO_TRIGGER_ID = 69420;
const std::string LMAO_TEXTURE = "game/particle_00.png"; // built-in GD texture
const std::string MACRO_DIR = "lmaobot/lmao_macros/";

class $modify(LmaoBotLayer, PlayLayer) {
    bool init(GJGameLevel* level) {
        if (!PlayLayer::init(level)) return false;

        log::info("lmaobot initialized!");

        bool foundLmaoTrigger = false;

        for (auto obj : m_objects) {
            if (obj->m_objectID == LMAO_TRIGGER_ID) {
                foundLmaoTrigger = true;
                log::info("LMAO Trigger detected at X: {}, Y: {}", obj->getPositionX(), obj->getPositionY());

                // Begin generating macro string (this is placeholder logic)
                std::string macro = fmt::format("// Auto-generated by lmaobot\nJumpTo({}, {})\n", obj->getPositionX(), obj->getPositionY());

                std::string levelName = m_level->m_levelName;
                if (levelName.empty()) levelName = "Unnamed";

                std::string fileSafe = file::sanitizeName(levelName) + ".gdr";
                std::string fullPath = Mod::get()->getConfigDir() / MACRO_DIR / fileSafe;

                file::createDirectory(Mod::get()->getConfigDir() / MACRO_DIR);
                file::writeString(fullPath, macro);
                log::info("Saved macro to {}", fullPath);
                break;
            }
        }

        if (!foundLmaoTrigger) {
            log::warn("No LMAO Trigger (ID {}) found in this level.", LMAO_TRIGGER_ID);
        }

        return true;
    }
};